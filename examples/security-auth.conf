# Example: Security and Authentication
# Demonstrates security directives and authentication methods

events {
    worker_connections 1024;
}

http {
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    
    server {
        listen 80;
        server_name example.com;
        
        # Hide server version
        server_tokens off;
        
        # Large client header buffers for complex requests
        large_client_header_buffers 4 32k;
        
        # Enable underscores in headers
        underscores_in_headers on;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        location / {
            return 200 "Public area";
        }
        
        # Basic authentication
        location /admin {
            auth_basic "Admin Area";
            auth_basic_user_file /etc/nginx/.htpasswd;
            
            location ~ \.php$ {
                # Additional security for PHP files
                auth_basic "Admin PHP Access";
                auth_basic_user_file /etc/nginx/.htpasswd-admin;
                include fastcgi_params;
            }
        }
        
        # Rate limiting
        location /login {
            limit_req zone=login burst=3 nodelay;
            proxy_pass http://backend;
        }
        
        location /api {
            limit_req zone=api burst=20 nodelay;
            limit_conn addr 10;
            proxy_pass http://backend;
        }
        
        # IP-based access control
        location /internal {
            allow 192.168.1.0/24;
            allow 10.0.0.0/8;
            deny all;
            
            return 200 "Internal access only";
        }
        
        # Protected downloads with auth
        location /downloads {
            auth_basic "Download Area";
            auth_basic_user_file /etc/nginx/.htpasswd;
            alias /var/www/protected;
        }
        
        # Security through obscurity
        location /secret {
            # Custom authentication logic could go here
            if ($http_x_secret_token != "mysecrettoken") {
                return 403;
            }
            return 200 "Secret area accessed";
        }
        
        # CORS configuration
        location /api/public {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            proxy_pass http://backend;
        }
    }
}
