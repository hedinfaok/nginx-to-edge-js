# Example: Header Manipulation
# Demonstrates add_header, more_set_headers, and proxy header directives

events {
    worker_connections 1024;
}

http {
    # Load headers_more module for advanced header manipulation
    # load_module modules/ngx_http_headers_more_filter_module.so;

    server {
        listen 80;
        server_name example.com;

        # Global headers for all responses
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "SAMEORIGIN" always;

        location / {
            # Basic response headers
            add_header X-Server-Name "nginx-example";
            add_header X-Response-Time $request_time;
            add_header Vary "Accept-Encoding, User-Agent";

            return 200 "Header manipulation examples";
        }

        location /api {
            # CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Accept, Authorization, Content-Type, X-Requested-With' always;
            add_header 'Access-Control-Expose-Headers' 'X-Total-Count, X-Page-Count' always;

            # Custom business headers
            add_header X-API-Version "v1.0";
            add_header X-Rate-Limit "1000";

            proxy_pass http://backend;
        }

        location /proxy-headers {
            # Proxy request headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            proxy_set_header X-Forwarded-Port $server_port;

            # Custom headers to backend
            proxy_set_header X-Client-IP $remote_addr;
            proxy_set_header X-Request-Start $msec;
            proxy_set_header User-Agent $http_user_agent;

            # Remove sensitive headers
            proxy_set_header Authorization "";
            proxy_set_header Cookie "";

            proxy_pass http://backend;
        }

        location /cache-headers {
            # Cache control headers
            add_header Cache-Control "public, max-age=3600";
            add_header Last-Modified $date_gmt;
            add_header ETag $request_id;

            # Conditional caching
            if ($args ~ "nocache") {
                add_header Cache-Control "no-cache, no-store, must-revalidate";
            }

            return 200 "Cached response";
        }

        location /security-headers {
            # Security headers
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
            add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'";
            add_header X-XSS-Protection "1; mode=block";
            add_header Referrer-Policy "strict-origin-when-cross-origin";
            add_header Permissions-Policy "geolocation=(), microphone=(), camera=()";

            return 200 "Security headers applied";
        }

        location /s3-proxy {
            # Hide AWS S3 headers
            proxy_hide_header x-amz-id-2;
            proxy_hide_header x-amz-request-id;
            proxy_hide_header x-amz-meta-server-side-encryption;
            proxy_hide_header x-amz-server-side-encryption;
            proxy_hide_header x-amz-bucket-region;
            proxy_hide_header Set-Cookie;

            # Ignore unwanted headers from upstream
            proxy_ignore_headers Set-Cookie Cache-Control Expires;

            # Set custom headers
            proxy_set_header Host s3-bucket.amazonaws.com;
            proxy_set_header Authorization "";

            # Add response headers
            add_header X-Proxy-Cache $upstream_cache_status;
            add_header X-Content-Source "S3";

            proxy_pass https://s3-bucket.amazonaws.com;
        }

        location /websocket {
            # WebSocket upgrade headers
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # WebSocket-specific headers
            proxy_set_header Sec-WebSocket-Extensions $http_sec_websocket_extensions;
            proxy_set_header Sec-WebSocket-Key $http_sec_websocket_key;
            proxy_set_header Sec-WebSocket-Version $http_sec_websocket_version;

            proxy_cache_bypass $http_upgrade;
            proxy_http_version 1.1;

            proxy_pass http://websocket-backend;
        }

        # Advanced header manipulation with more_set_headers
        # (requires headers_more module)
        location /advanced-headers {
            # more_set_headers 'Server: CustomServer/1.0';
            # more_set_headers 'X-Custom-Header: Advanced-Value';
            # more_clear_headers 'X-Powered-By';

            # Fallback using standard directives
            add_header X-Advanced-Feature "enabled";
            add_header X-Processing-Time $request_time;

            return 200 "Advanced header manipulation";
        }
    }
}
