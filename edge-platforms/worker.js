// Generated by nginx-to-edge-js vcrossplane-1.0.0
// Source: unknown
// Generated at: 2025-08-11T15:32:41.551Z
// Target platform: CloudFlareGenerator

addEventListener("fetch", event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const url = new URL(request.url);
  const hostname = url.hostname;

  // Server block 1
  if (hostname === "example.com") {
    // Location: /static/
    if (url.pathname.startsWith("/static/")) {
      // Static file serving - requires CloudFlare Pages or R2
      return new Response("Static file serving not implemented", { status: 501 });
    }

    // Location: /api/
    if (url.pathname.startsWith("/api/")) {
      // Proxy to: http://backend:3000/
      return await proxyRequest(request, "http://backend:3000/", url);
    }

    // Location: /
    if (url.pathname.startsWith("/")) {
      const redirectUrl = "https://$server_name$request_uri";
      return Response.redirect(redirectUrl, 301);
    }
  }


  // Default response
  return new Response("Not Found", { status: 404 });
}

// Helper function to proxy requests
async function proxyRequest(request, backend, url) {
  const backendUrl = new URL(backend);
  const proxyUrl = new URL(url.pathname + url.search, backendUrl);

  // Copy headers
  const headers = new Headers(request.headers);
  headers.set("Host", backendUrl.hostname);
  headers.set("X-Forwarded-For", request.headers.get("CF-Connecting-IP") || "");
  headers.set("X-Real-IP", request.headers.get("CF-Connecting-IP") || "");

  const response = await fetch(proxyUrl, {
    method: request.method,
    headers: headers,
    body: request.body
  });

  // Copy response headers
  const responseHeaders = new Headers(response.headers);
  
  return new Response(response.body, {
    status: response.status,
    statusText: response.statusText,
    headers: responseHeaders
  });
}