// Generated by nginx-to-edge-js vcrossplane-1.0.0
// Source: unknown
// Generated at: 2025-08-11T19:38:27.794Z
// Target platform: LambdaEdgeGenerator

exports.handler = async (event) => {
  const request = event.Records[0].cf.request;
  const response = event.Records[0].cf.response;
  const headers = request.headers;
  const uri = request.uri;
  const hostname = headers.host ? headers.host[0].value : '';

  // Process based on event type
  switch (event.Records[0].cf.eventType) {
    case 'viewer-request':
      return await handleViewerRequest(request);
    case 'origin-request':
      return await handleOriginRequest(request);
    case 'origin-response':
      return await handleOriginResponse(response);
    case 'viewer-response':
      return await handleViewerResponse(response);
    default:
      return request;
  }
};

async function handleViewerRequest(request) {
  const uri = request.uri;
  const hostname = request.headers.host ? request.headers.host[0].value : '';

  // Server block 1
  if (hostname === "example.com") {
    // Location: /
    if (uri === "/" || uri.startsWith("/")) {
      // Proxy to: http://backend:3000
      // Modify origin request
      request.origin = {
        custom: {
          domainName: 'backend',
          port: 3000,
          protocol: 'http',
          path: '/'
        }
      };
    }
  }

  return request;
}

async function handleOriginRequest(request) {
  // Modify request to origin
  // Origin request modifications
  // Add any custom headers or path modifications here

  return request;
}

async function handleOriginResponse(response) {
  // Modify response from origin
  // Origin response modifications

  return response;
}

async function handleViewerResponse(response) {
  // Modify response to viewer
  // Viewer response modifications
  // Final response modifications before sending to client

  return response;
}

// Helper functions

function matchesPath(uri, pattern) {
  if (pattern === '/') return true;
  if (pattern.endsWith('/')) {
    return uri.startsWith(pattern);
  }
  return uri === pattern || uri.startsWith(pattern + '/');
}

function addHeader(headers, name, value) {
  const key = name.toLowerCase();
  if (!headers[key]) {
    headers[key] = [];
  }
  headers[key].push({ key: name, value: value });
}

function setHeader(headers, name, value) {
  const key = name.toLowerCase();
  headers[key] = [{ key: name, value: value }];
}