name: CI - RHEL

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-rhel:
    runs-on: ubuntu-latest
    container:
      image: almalinux:9
    
    steps:
    - name: Install Git and basic tools
      run: |
        dnf update -y
        dnf install -y --allowerasing git curl

    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install development tools
      run: |
        dnf groupinstall -y "Development Tools"
        dnf install -y cmake autoconf automake libtool pkgconfig

    - name: Install libucl (FreeBSD version from source)
      run: |
        # Clone and build FreeBSD libucl from source (same as Ubuntu)
        git clone https://github.com/vstakhov/libucl.git /tmp/libucl
        cd /tmp/libucl
        ./autogen.sh
        ./configure --prefix=/usr/local
        make
        make install
        ldconfig
        # Verify installation
        ls -la /usr/local/lib/libucl*
        echo "FreeBSD libucl installed successfully on RHEL"

    - name: Install Python and pip
      run: |
        dnf install -y python3 python3-pip

    - name: Install crossplane
      run: |
        # Try pipx first
        dnf install -y pipx || pip3 install --user pipx
        if command -v pipx >/dev/null 2>&1; then
          pipx install crossplane
          echo "crossplane installed via pipx"
        else
          # Fallback to pip3 with user install
          pip3 install --user crossplane
          echo "crossplane installed via pip3 --user"
          # Add user bin to PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        fi

    - name: Verify libucl installation
      run: |
        # Check for FreeBSD libucl installation
        find /usr/local -name "libucl.so*" 2>/dev/null | head -5
        ls -la /usr/local/lib/libucl* || echo "FreeBSD libucl not found in /usr/local/lib"
        echo "=== Checking FreeBSD libucl symbols ==="
        nm -D /usr/local/lib/libucl.so.1 2>/dev/null | grep ucl_parser || echo "Checking libucl.so..."
        nm -D /usr/local/lib/libucl.so 2>/dev/null | grep ucl_parser || echo "No ucl_parser symbols found"
        echo "=== Checking all UCL symbols ==="
        nm -D /usr/local/lib/libucl.so 2>/dev/null | grep ucl | head -10 || echo "No symbols found"
        echo "=== Checking library info ==="
        file /usr/local/lib/libucl.so*
        ldd /usr/local/lib/libucl.so* || echo "ldd failed"
        echo "FreeBSD libucl FFI integration - ucl_parser functions available"
    
    - name: Verify crossplane installation
      run: |
        # Ensure crossplane is in PATH
        export PATH="$HOME/.local/bin:$PATH"
        which crossplane || echo "crossplane not found in PATH"
        crossplane --version
        echo "crossplane installed successfully on RHEL"
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Run tests
      run: |
        # Ensure crossplane is available for tests
        export PATH="$HOME/.local/bin:$PATH"
        npm test
    
    - name: Test CLI functionality
      run: |
        # Ensure crossplane is available for CLI tests
        export PATH="$HOME/.local/bin:$PATH"
        echo "=== Testing Unified CLI on RHEL ==="
        node dist/src/cli/index.js --help
        echo "=== Testing UCL parsing with FFI ==="
        node dist/src/cli/index.js parse examples/simple.ucl
        echo "=== Testing system dependencies ==="
        node dist/src/cli/index.js check
        echo "=== Testing nginx-to-UCL conversion ==="
        node dist/src/cli/index.js preview examples/basic-reverse-proxy/nginx.conf
        echo "=== Testing system integration ==="
        node dist/src/cli/index.js test
        echo "=== Testing npm link ==="
        npm link
        echo "=== Testing global CLI ==="
        nginx-to-edge-js --help || echo "CLI not found in PATH"

  release-rhel:
    needs: test-rhel
    runs-on: ubuntu-latest
    container:
      image: almalinux:9
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Install Git and basic tools
      run: |
        dnf update -y
        dnf install -y --allowerasing git curl

    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install development tools
      run: |
        dnf groupinstall -y "Development Tools"
        dnf install -y cmake autoconf automake libtool pkgconfig

    - name: Install libucl (FreeBSD version from source)
      run: |
        # Clone and build FreeBSD libucl from source
        git clone https://github.com/vstakhov/libucl.git /tmp/libucl
        cd /tmp/libucl
        ./autogen.sh
        ./configure --prefix=/usr/local
        make
        make install
        ldconfig
        # Verify installation
        ls -la /usr/local/lib/libucl*
        echo "FreeBSD libucl installed successfully on RHEL"

    - name: Install Python and pip
      run: |
        dnf install -y python3 python3-pip

    - name: Install crossplane
      run: |
        # Try pipx first
        dnf install -y pipx || pip3 install --user pipx
        if command -v pipx >/dev/null 2>&1; then
          pipx install crossplane
        else
          # Fallback to pip3 with user install
          pip3 install --user crossplane
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        fi
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Run tests
      run: |
        # Ensure crossplane is available for tests
        export PATH="$HOME/.local/bin:$PATH"
        npm test
    
    # Note: Publishing step would be the same as macOS workflow
    # Uncomment when ready to publish to npm
    # - name: Publish to npm
    #   run: npm publish
    #   env:
    #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
