name: CI - Ubuntu

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-ubuntu:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Update package lists
      run: |
        sudo apt-get update

    - name: Install libucl
      run: |
        sudo apt-get install -y libucl-dev

    - name: Install Python and pip
      run: |
        sudo apt-get install -y python3 python3-pip python3-venv

    - name: Install crossplane
      run: |
        # Try pipx first (recommended approach)
        sudo apt-get install -y pipx || true
        if command -v pipx >/dev/null 2>&1; then
          pipx install crossplane
          echo "crossplane installed via pipx"
        else
          # Fallback to pip3 with user install
          pip3 install --user crossplane
          echo "crossplane installed via pip3 --user"
          # Add user bin to PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        fi

    - name: Verify libucl installation
      run: |
        # Check common libucl locations on Ubuntu
        find /usr -name "libucl.so*" 2>/dev/null | head -5
        ls -la /usr/lib/x86_64-linux-gnu/libucl.so* || echo "libucl not found in expected location"
        echo "libucl FFI integration - no ucl_tool binary needed"
    
    - name: Verify crossplane installation
      run: |
        # Ensure crossplane is in PATH
        export PATH="$HOME/.local/bin:$PATH"
        which crossplane || echo "crossplane not found in PATH"
        crossplane --version
        echo "crossplane installed successfully on Ubuntu"
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
      continue-on-error: true
    
    - name: Build project
      run: npm run build
    
    - name: Run tests
      run: |
        # Ensure crossplane is available for tests
        export PATH="$HOME/.local/bin:$PATH"
        npm test
    
    - name: Test CLI functionality
      run: |
        # Ensure crossplane is available for CLI tests
        export PATH="$HOME/.local/bin:$PATH"
        echo "=== Testing Unified CLI on Ubuntu ==="
        node dist/src/cli/index.js --help
        echo "=== Testing UCL parsing with FFI ==="
        node dist/src/cli/index.js parse examples/simple.ucl
        echo "=== Testing system dependencies ==="
        node dist/src/cli/index.js check
        echo "=== Testing nginx-to-UCL conversion ==="
        node dist/src/cli/index.js preview examples/basic-reverse-proxy/nginx.conf
        echo "=== Testing system integration ==="
        node dist/src/cli/index.js test
        echo "=== Testing npm link ==="
        npm link
        echo "=== Testing global CLI ==="
        nginx-to-edge-js --help || echo "CLI not found in PATH"

  release-ubuntu:
    needs: test-ubuntu
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Update package lists
      run: |
        sudo apt-get update

    - name: Install libucl
      run: |
        sudo apt-get install -y libucl-dev

    - name: Install Python and pip
      run: |
        sudo apt-get install -y python3 python3-pip python3-venv

    - name: Install crossplane
      run: |
        # Try pipx first (recommended approach)
        sudo apt-get install -y pipx || true
        if command -v pipx >/dev/null 2>&1; then
          pipx install crossplane
        else
          # Fallback to pip3 with user install
          pip3 install --user crossplane
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        fi
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Run tests
      run: |
        # Ensure crossplane is available for tests
        export PATH="$HOME/.local/bin:$PATH"
        npm test
    
    # Note: Publishing step would be the same as macOS workflow
    # Uncomment when ready to publish to npm
    # - name: Publish to npm
    #   run: npm publish
    #   env:
    #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
